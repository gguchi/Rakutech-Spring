/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class NgSpringBootService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @template T
     * @param {?} url
     * @param {?=} pageable
     * @param {?=} options
     * @return {?}
     */
    getPage(url, pageable, options) {
        /** @type {?} */
        const params = this.urlParams(pageable, url.includes('?'));
        return this.http.get(url + params, options);
    }
    /**
     * @param {?} url
     * @param {?} resource
     * @param {?=} options
     * @return {?}
     */
    postResource(url, resource, options) {
        return this.http.post(url, resource, options ? options : { observe: 'response' }).pipe(switchMap((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            if (r.status === 201) {
                /** @type {?} */
                const location = r.headers.get('location');
                console.log(location);
                return of({ location: location, id: location && location.length > 0 ? location.substr(location.lastIndexOf('/') + 1) : '' });
            }
            else {
                return throwError({ status: r.status, text: r.statusText });
            }
        })));
    }
    /**
     * @private
     * @param {?} p
     * @param {?} append
     * @return {?}
     */
    urlParams(p, append) {
        /** @type {?} */
        let params = '';
        if (p) {
            if (p.page) {
                params += 'page=' + p.page + '&';
            }
            if (p.size) {
                params += 'size=' + p.size + '&';
            }
            if (p.sort) {
                params += 'sort=' + p.sort;
                if (p.sortDir) {
                    params += ';' + p.sortDir;
                }
                params += '&';
            }
            if (p.filter) {
                params += 'filter=' + p.filter + '&';
            }
        }
        return params.length === 0 ? '' : (append ? '&' : '?') + params.substr(0, params.length - 1);
    }
}
NgSpringBootService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgSpringBootService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ NgSpringBootService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgSpringBootService_Factory() { return new NgSpringBootService(i0.ɵɵinject(i1.HttpClient)); }, token: NgSpringBootService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgSpringBootService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc3ByaW5nLWJvb3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXNwcmluZy1ib290LyIsInNvdXJjZXMiOlsibGliL25nLXNwcmluZy1ib290LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBMkIsTUFBTSxzQkFBc0IsQ0FBQztBQUUzRSxPQUFPLEVBQWMsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUszQyxNQUFNLE9BQU8sbUJBQW1COzs7O0lBRTlCLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFDcEMsQ0FBQzs7Ozs7Ozs7SUFFRCxPQUFPLENBQUksR0FBVyxFQUFFLFFBQW1CLEVBQUUsT0FXNUM7O2NBQ08sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBVSxHQUFHLEdBQUcsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7Ozs7SUFFRCxZQUFZLENBQUMsR0FBVyxFQUFFLFFBQWEsRUFBRSxPQVd4QztRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2xGLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7O3NCQUNkLFFBQVEsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7Z0JBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3RCLE9BQU8sRUFBRSxDQUFDLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUM7YUFDNUg7aUJBQU07Z0JBQ0wsT0FBTyxVQUFVLENBQUMsRUFBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUM7YUFDM0Q7UUFDSCxDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Ozs7OztJQUVPLFNBQVMsQ0FBQyxDQUFXLEVBQUUsTUFBZTs7WUFDeEMsTUFBTSxHQUFHLEVBQUU7UUFDZixJQUFJLENBQUMsRUFBRTtZQUNMLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDVixNQUFNLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO2FBQ2xDO1lBQ0QsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUNWLE1BQU0sSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7YUFDbEM7WUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMzQixJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7b0JBQ2IsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO2lCQUMzQjtnQkFDRCxNQUFNLElBQUksR0FBRyxDQUFDO2FBQ2Y7WUFDRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQzthQUN0QztTQUNGO1FBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9GLENBQUM7OztZQXRFRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFUUSxVQUFVOzs7Ozs7OztJQVlMLG1DQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgUGFnZWFibGUgfSBmcm9tICcuL21vZGVscy9wYWdlYWJsZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vbW9kZWxzL3BhZ2UnO1xuaW1wb3J0IHsgUG9zdFJlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvcG9zdC1yZXNwb25zZSc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nU3ByaW5nQm9vdFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICB9XG5cbiAgZ2V0UGFnZTxUPih1cmw6IHN0cmluZywgcGFnZWFibGU/OiBQYWdlYWJsZSwgb3B0aW9ucz86IHtcbiAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnMgfCB7XG4gICAgICBbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICB9O1xuICAgIG9ic2VydmU/OiAnYm9keSc7XG4gICAgcGFyYW1zPzogSHR0cFBhcmFtcyB8IHtcbiAgICAgIFtwYXJhbTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfTtcbiAgICByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW47XG4gICAgcmVzcG9uc2VUeXBlPzogJ2pzb24nO1xuICAgIHdpdGhDcmVkZW50aWFscz86IGJvb2xlYW47XG4gIH0pOiBPYnNlcnZhYmxlPFBhZ2U8VD4+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnVybFBhcmFtcyhwYWdlYWJsZSwgdXJsLmluY2x1ZGVzKCc/JykpO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhZ2U8VD4+KHVybCArIHBhcmFtcywgb3B0aW9ucyk7XG4gIH1cblxuICBwb3N0UmVzb3VyY2UodXJsOiBzdHJpbmcsIHJlc291cmNlOiBhbnksIG9wdGlvbnM/OiB7XG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzIHwge1xuICAgICAgW2hlYWRlcjogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfTtcbiAgICBvYnNlcnZlOiAncmVzcG9uc2UnO1xuICAgIHBhcmFtcz86IEh0dHBQYXJhbXMgfCB7XG4gICAgICBbcGFyYW06IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH07XG4gICAgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuO1xuICAgIHJlc3BvbnNlVHlwZT86ICdqc29uJztcbiAgICB3aXRoQ3JlZGVudGlhbHM/OiBib29sZWFuO1xuICB9KTogT2JzZXJ2YWJsZTxQb3N0UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCByZXNvdXJjZSwgb3B0aW9ucyA/IG9wdGlvbnMgOiB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAociA9PiB7XG4gICAgICAgIGlmIChyLnN0YXR1cyA9PT0gMjAxKSB7XG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSByLmhlYWRlcnMuZ2V0KCdsb2NhdGlvbicpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGxvY2F0aW9uKTtcbiAgICAgICAgICByZXR1cm4gb2Yoe2xvY2F0aW9uOiBsb2NhdGlvbiwgaWQ6IGxvY2F0aW9uICYmIGxvY2F0aW9uLmxlbmd0aCA+IDAgPyBsb2NhdGlvbi5zdWJzdHIobG9jYXRpb24ubGFzdEluZGV4T2YoJy8nKSArIDEpIDogJyd9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcih7c3RhdHVzOiByLnN0YXR1cywgdGV4dDogci5zdGF0dXNUZXh0fSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdXJsUGFyYW1zKHA6IFBhZ2VhYmxlLCBhcHBlbmQ6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGxldCBwYXJhbXMgPSAnJztcbiAgICBpZiAocCkge1xuICAgICAgaWYgKHAucGFnZSkge1xuICAgICAgICBwYXJhbXMgKz0gJ3BhZ2U9JyArIHAucGFnZSArICcmJztcbiAgICAgIH1cbiAgICAgIGlmIChwLnNpemUpIHtcbiAgICAgICAgcGFyYW1zICs9ICdzaXplPScgKyBwLnNpemUgKyAnJic7XG4gICAgICB9XG4gICAgICBpZiAocC5zb3J0KSB7XG4gICAgICAgIHBhcmFtcyArPSAnc29ydD0nICsgcC5zb3J0O1xuICAgICAgICBpZiAocC5zb3J0RGlyKSB7XG4gICAgICAgICAgcGFyYW1zICs9ICc7JyArIHAuc29ydERpcjtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMgKz0gJyYnO1xuICAgICAgfVxuICAgICAgaWYgKHAuZmlsdGVyKSB7XG4gICAgICAgIHBhcmFtcyArPSAnZmlsdGVyPScgKyBwLmZpbHRlciArICcmJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcy5sZW5ndGggPT09IDAgPyAnJyA6IChhcHBlbmQgPyAnJicgOiAnPycpICsgcGFyYW1zLnN1YnN0cigwLCBwYXJhbXMubGVuZ3RoIC0gMSk7XG4gIH1cblxufVxuIl19