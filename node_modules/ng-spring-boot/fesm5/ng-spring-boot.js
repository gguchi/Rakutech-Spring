import { Injectable, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgSpringBootService = /** @class */ (function () {
    function NgSpringBootService(http) {
        this.http = http;
    }
    /**
     * @template T
     * @param {?} url
     * @param {?=} pageable
     * @param {?=} options
     * @return {?}
     */
    NgSpringBootService.prototype.getPage = /**
     * @template T
     * @param {?} url
     * @param {?=} pageable
     * @param {?=} options
     * @return {?}
     */
    function (url, pageable, options) {
        /** @type {?} */
        var params = this.urlParams(pageable, url.includes('?'));
        return this.http.get(url + params, options);
    };
    /**
     * @param {?} url
     * @param {?} resource
     * @param {?=} options
     * @return {?}
     */
    NgSpringBootService.prototype.postResource = /**
     * @param {?} url
     * @param {?} resource
     * @param {?=} options
     * @return {?}
     */
    function (url, resource, options) {
        return this.http.post(url, resource, options ? options : { observe: 'response' }).pipe(switchMap((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (r.status === 201) {
                /** @type {?} */
                var location_1 = r.headers.get('location');
                console.log(location_1);
                return of({ location: location_1, id: location_1 && location_1.length > 0 ? location_1.substr(location_1.lastIndexOf('/') + 1) : '' });
            }
            else {
                return throwError({ status: r.status, text: r.statusText });
            }
        })));
    };
    /**
     * @private
     * @param {?} p
     * @param {?} append
     * @return {?}
     */
    NgSpringBootService.prototype.urlParams = /**
     * @private
     * @param {?} p
     * @param {?} append
     * @return {?}
     */
    function (p, append) {
        /** @type {?} */
        var params = '';
        if (p) {
            if (p.page) {
                params += 'page=' + p.page + '&';
            }
            if (p.size) {
                params += 'size=' + p.size + '&';
            }
            if (p.sort) {
                params += 'sort=' + p.sort;
                if (p.sortDir) {
                    params += ';' + p.sortDir;
                }
                params += '&';
            }
            if (p.filter) {
                params += 'filter=' + p.filter + '&';
            }
        }
        return params.length === 0 ? '' : (append ? '&' : '?') + params.substr(0, params.length - 1);
    };
    NgSpringBootService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgSpringBootService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ NgSpringBootService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgSpringBootService_Factory() { return new NgSpringBootService(ɵɵinject(HttpClient)); }, token: NgSpringBootService, providedIn: "root" });
    return NgSpringBootService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgSpringBootModule = /** @class */ (function () {
    function NgSpringBootModule() {
    }
    NgSpringBootModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: []
                },] }
    ];
    return NgSpringBootModule;
}());

export { NgSpringBootModule, NgSpringBootService };
//# sourceMappingURL=ng-spring-boot.js.map
