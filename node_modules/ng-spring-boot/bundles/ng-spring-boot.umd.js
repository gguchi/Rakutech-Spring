(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ng-spring-boot', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['ng-spring-boot'] = {}, global.ng.core, global.ng.common.http, global.rxjs, global.rxjs.operators));
}(this, function (exports, core, http, rxjs, operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgSpringBootService = /** @class */ (function () {
        function NgSpringBootService(http) {
            this.http = http;
        }
        /**
         * @template T
         * @param {?} url
         * @param {?=} pageable
         * @param {?=} options
         * @return {?}
         */
        NgSpringBootService.prototype.getPage = /**
         * @template T
         * @param {?} url
         * @param {?=} pageable
         * @param {?=} options
         * @return {?}
         */
        function (url, pageable, options) {
            /** @type {?} */
            var params = this.urlParams(pageable, url.includes('?'));
            return this.http.get(url + params, options);
        };
        /**
         * @param {?} url
         * @param {?} resource
         * @param {?=} options
         * @return {?}
         */
        NgSpringBootService.prototype.postResource = /**
         * @param {?} url
         * @param {?} resource
         * @param {?=} options
         * @return {?}
         */
        function (url, resource, options) {
            return this.http.post(url, resource, options ? options : { observe: 'response' }).pipe(operators.switchMap((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (r.status === 201) {
                    /** @type {?} */
                    var location_1 = r.headers.get('location');
                    console.log(location_1);
                    return rxjs.of({ location: location_1, id: location_1 && location_1.length > 0 ? location_1.substr(location_1.lastIndexOf('/') + 1) : '' });
                }
                else {
                    return rxjs.throwError({ status: r.status, text: r.statusText });
                }
            })));
        };
        /**
         * @private
         * @param {?} p
         * @param {?} append
         * @return {?}
         */
        NgSpringBootService.prototype.urlParams = /**
         * @private
         * @param {?} p
         * @param {?} append
         * @return {?}
         */
        function (p, append) {
            /** @type {?} */
            var params = '';
            if (p) {
                if (p.page) {
                    params += 'page=' + p.page + '&';
                }
                if (p.size) {
                    params += 'size=' + p.size + '&';
                }
                if (p.sort) {
                    params += 'sort=' + p.sort;
                    if (p.sortDir) {
                        params += ';' + p.sortDir;
                    }
                    params += '&';
                }
                if (p.filter) {
                    params += 'filter=' + p.filter + '&';
                }
            }
            return params.length === 0 ? '' : (append ? '&' : '?') + params.substr(0, params.length - 1);
        };
        NgSpringBootService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgSpringBootService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ NgSpringBootService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgSpringBootService_Factory() { return new NgSpringBootService(core.ɵɵinject(http.HttpClient)); }, token: NgSpringBootService, providedIn: "root" });
        return NgSpringBootService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgSpringBootModule = /** @class */ (function () {
        function NgSpringBootModule() {
        }
        NgSpringBootModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [],
                        exports: []
                    },] }
        ];
        return NgSpringBootModule;
    }());

    exports.NgSpringBootModule = NgSpringBootModule;
    exports.NgSpringBootService = NgSpringBootService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-spring-boot.umd.js.map
