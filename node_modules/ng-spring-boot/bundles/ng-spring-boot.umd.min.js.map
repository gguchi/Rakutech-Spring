{"version":3,"sources":["ng://ng-spring-boot/lib/ng-spring-boot.service.ts","ng://ng-spring-boot/lib/ng-spring-boot.module.ts"],"names":["NgSpringBootService","http","this","prototype","getPage","url","pageable","options","params","urlParams","includes","get","postResource","resource","post","observe","pipe","switchMap","r","status","location_1","headers","console","log","of","location","id","length","substr","lastIndexOf","throwError","text","statusText","p","append","page","size","sort","sortDir","filter","Injectable","args","providedIn","HttpClient","NgSpringBootModule","NgModule","declarations","imports","exports"],"mappings":"4bAAA,IAAAA,EAAA,WAaE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,SAGpBD,EAAAG,UAAAC,QAAA,SAAWC,EAAaC,EAAqBC,OAYrCC,EAASN,KAAKO,UAAUH,EAAUD,EAAIK,SAAS,MACrD,OAAOR,KAAKD,KAAKU,IAAaN,EAAMG,EAAQD,IAG9CP,EAAAG,UAAAS,aAAA,SAAaP,EAAaQ,EAAeN,GAYvC,OAAOL,KAAKD,KAAKa,KAAKT,EAAKQ,EAAUN,GAAoB,CAACQ,QAAS,aAAaC,KAC9EC,EAAAA,UAAS,SAACC,GACR,GAAiB,MAAbA,EAAEC,OAAgB,KACdC,EAAWF,EAAEG,QAAQV,IAAI,YAE/B,OADAW,QAAQC,IAAIH,GACLI,EAAAA,GAAG,CAACC,SAAUL,EAAUM,GAAIN,GAAYA,EAASO,OAAS,EAAIP,EAASQ,OAAOR,EAASS,YAAY,KAAO,GAAK,KAEtH,OAAOC,EAAAA,WAAW,CAACX,OAAQD,EAAEC,OAAQY,KAAMb,EAAEc,iBAM7ChC,EAAAG,UAAAM,UAAR,SAAkBwB,EAAaC,OACzB1B,EAAS,GAmBb,OAlBIyB,IACEA,EAAEE,OACJ3B,GAAU,QAAUyB,EAAEE,KAAO,KAE3BF,EAAEG,OACJ5B,GAAU,QAAUyB,EAAEG,KAAO,KAE3BH,EAAEI,OACJ7B,GAAU,QAAUyB,EAAEI,KAClBJ,EAAEK,UACJ9B,GAAU,IAAMyB,EAAEK,SAEpB9B,GAAU,KAERyB,EAAEM,SACJ/B,GAAU,UAAYyB,EAAEM,OAAS,MAGZ,IAAlB/B,EAAOmB,OAAe,IAAMO,EAAS,IAAM,KAAO1B,EAAOoB,OAAO,EAAGpB,EAAOmB,OAAS,wBArE7Fa,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARLC,EAAAA,+IADT,GCAAC,EAAA,WAEA,SAAAA,KAMkC,2BANjCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,GACdC,QAAS,GAETC,QAAS,OAEuBJ,EARlC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Pageable } from './models/pageable';\nimport { Observable, of, throwError } from 'rxjs';\nimport { Page } from './models/page';\nimport { PostResponse } from './models/post-response';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgSpringBootService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getPage<T>(url: string, pageable?: Pageable, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<Page<T>> {\n    const params = this.urlParams(pageable, url.includes('?'));\n    return this.http.get<Page<T>>(url + params, options);\n  }\n\n  postResource(url: string, resource: any, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe: 'response';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<PostResponse> {\n    return this.http.post(url, resource, options ? options : {observe: 'response'}).pipe(\n      switchMap(r => {\n        if (r.status === 201) {\n          const location = r.headers.get('location');\n          console.log(location);\n          return of({location: location, id: location && location.length > 0 ? location.substr(location.lastIndexOf('/') + 1) : ''});\n        } else {\n          return throwError({status: r.status, text: r.statusText});\n        }\n      })\n    );\n  }\n\n  private urlParams(p: Pageable, append: boolean): string {\n    let params = '';\n    if (p) {\n      if (p.page) {\n        params += 'page=' + p.page + '&';\n      }\n      if (p.size) {\n        params += 'size=' + p.size + '&';\n      }\n      if (p.sort) {\n        params += 'sort=' + p.sort;\n        if (p.sortDir) {\n          params += ';' + p.sortDir;\n        }\n        params += '&';\n      }\n      if (p.filter) {\n        params += 'filter=' + p.filter + '&';\n      }\n    }\n    return params.length === 0 ? '' : (append ? '&' : '?') + params.substr(0, params.length - 1);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class NgSpringBootModule { }\n"]}