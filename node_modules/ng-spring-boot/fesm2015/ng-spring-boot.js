import { Injectable, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgSpringBootService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @template T
     * @param {?} url
     * @param {?=} pageable
     * @param {?=} options
     * @return {?}
     */
    getPage(url, pageable, options) {
        /** @type {?} */
        const params = this.urlParams(pageable, url.includes('?'));
        return this.http.get(url + params, options);
    }
    /**
     * @param {?} url
     * @param {?} resource
     * @param {?=} options
     * @return {?}
     */
    postResource(url, resource, options) {
        return this.http.post(url, resource, options ? options : { observe: 'response' }).pipe(switchMap((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            if (r.status === 201) {
                /** @type {?} */
                const location = r.headers.get('location');
                console.log(location);
                return of({ location: location, id: location && location.length > 0 ? location.substr(location.lastIndexOf('/') + 1) : '' });
            }
            else {
                return throwError({ status: r.status, text: r.statusText });
            }
        })));
    }
    /**
     * @private
     * @param {?} p
     * @param {?} append
     * @return {?}
     */
    urlParams(p, append) {
        /** @type {?} */
        let params = '';
        if (p) {
            if (p.page) {
                params += 'page=' + p.page + '&';
            }
            if (p.size) {
                params += 'size=' + p.size + '&';
            }
            if (p.sort) {
                params += 'sort=' + p.sort;
                if (p.sortDir) {
                    params += ';' + p.sortDir;
                }
                params += '&';
            }
            if (p.filter) {
                params += 'filter=' + p.filter + '&';
            }
        }
        return params.length === 0 ? '' : (append ? '&' : '?') + params.substr(0, params.length - 1);
    }
}
NgSpringBootService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgSpringBootService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ NgSpringBootService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgSpringBootService_Factory() { return new NgSpringBootService(ɵɵinject(HttpClient)); }, token: NgSpringBootService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgSpringBootModule {
}
NgSpringBootModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [],
                exports: []
            },] }
];

export { NgSpringBootModule, NgSpringBootService };
//# sourceMappingURL=ng-spring-boot.js.map
