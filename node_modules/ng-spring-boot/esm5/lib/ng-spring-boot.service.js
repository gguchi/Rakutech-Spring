/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var NgSpringBootService = /** @class */ (function () {
    function NgSpringBootService(http) {
        this.http = http;
    }
    /**
     * @template T
     * @param {?} url
     * @param {?=} pageable
     * @param {?=} options
     * @return {?}
     */
    NgSpringBootService.prototype.getPage = /**
     * @template T
     * @param {?} url
     * @param {?=} pageable
     * @param {?=} options
     * @return {?}
     */
    function (url, pageable, options) {
        /** @type {?} */
        var params = this.urlParams(pageable, url.includes('?'));
        return this.http.get(url + params, options);
    };
    /**
     * @param {?} url
     * @param {?} resource
     * @param {?=} options
     * @return {?}
     */
    NgSpringBootService.prototype.postResource = /**
     * @param {?} url
     * @param {?} resource
     * @param {?=} options
     * @return {?}
     */
    function (url, resource, options) {
        return this.http.post(url, resource, options ? options : { observe: 'response' }).pipe(switchMap((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (r.status === 201) {
                /** @type {?} */
                var location_1 = r.headers.get('location');
                console.log(location_1);
                return of({ location: location_1, id: location_1 && location_1.length > 0 ? location_1.substr(location_1.lastIndexOf('/') + 1) : '' });
            }
            else {
                return throwError({ status: r.status, text: r.statusText });
            }
        })));
    };
    /**
     * @private
     * @param {?} p
     * @param {?} append
     * @return {?}
     */
    NgSpringBootService.prototype.urlParams = /**
     * @private
     * @param {?} p
     * @param {?} append
     * @return {?}
     */
    function (p, append) {
        /** @type {?} */
        var params = '';
        if (p) {
            if (p.page) {
                params += 'page=' + p.page + '&';
            }
            if (p.size) {
                params += 'size=' + p.size + '&';
            }
            if (p.sort) {
                params += 'sort=' + p.sort;
                if (p.sortDir) {
                    params += ';' + p.sortDir;
                }
                params += '&';
            }
            if (p.filter) {
                params += 'filter=' + p.filter + '&';
            }
        }
        return params.length === 0 ? '' : (append ? '&' : '?') + params.substr(0, params.length - 1);
    };
    NgSpringBootService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgSpringBootService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ NgSpringBootService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgSpringBootService_Factory() { return new NgSpringBootService(i0.ɵɵinject(i1.HttpClient)); }, token: NgSpringBootService, providedIn: "root" });
    return NgSpringBootService;
}());
export { NgSpringBootService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgSpringBootService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc3ByaW5nLWJvb3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXNwcmluZy1ib290LyIsInNvdXJjZXMiOlsibGliL25nLXNwcmluZy1ib290LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBMkIsTUFBTSxzQkFBc0IsQ0FBQztBQUUzRSxPQUFPLEVBQWMsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUUzQztJQUtFLDZCQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3BDLENBQUM7Ozs7Ozs7O0lBRUQscUNBQU87Ozs7Ozs7SUFBUCxVQUFXLEdBQVcsRUFBRSxRQUFtQixFQUFFLE9BVzVDOztZQUNPLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVUsR0FBRyxHQUFHLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7Ozs7O0lBRUQsMENBQVk7Ozs7OztJQUFaLFVBQWEsR0FBVyxFQUFFLFFBQWEsRUFBRSxPQVd4QztRQUNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2xGLFNBQVM7Ozs7UUFBQyxVQUFBLENBQUM7WUFDVCxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFOztvQkFDZCxVQUFRLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO2dCQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVEsQ0FBQyxDQUFDO2dCQUN0QixPQUFPLEVBQUUsQ0FBQyxFQUFDLFFBQVEsRUFBRSxVQUFRLEVBQUUsRUFBRSxFQUFFLFVBQVEsSUFBSSxVQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO2FBQzVIO2lCQUFNO2dCQUNMLE9BQU8sVUFBVSxDQUFDLEVBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDO2FBQzNEO1FBQ0gsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Ozs7Ozs7SUFFTyx1Q0FBUzs7Ozs7O0lBQWpCLFVBQWtCLENBQVcsRUFBRSxNQUFlOztZQUN4QyxNQUFNLEdBQUcsRUFBRTtRQUNmLElBQUksQ0FBQyxFQUFFO1lBQ0wsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUNWLE1BQU0sSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7YUFDbEM7WUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQzthQUNsQztZQUNELElBQUksQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDVixNQUFNLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRTtvQkFDYixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7aUJBQzNCO2dCQUNELE1BQU0sSUFBSSxHQUFHLENBQUM7YUFDZjtZQUNELElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDWixNQUFNLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO2FBQ3RDO1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQzs7Z0JBdEVGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBVFEsVUFBVTs7OzhCQURuQjtDQWdGQyxBQXhFRCxJQXdFQztTQXJFWSxtQkFBbUI7Ozs7OztJQUVsQixtQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFBhZ2VhYmxlIH0gZnJvbSAnLi9tb2RlbHMvcGFnZWFibGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuL21vZGVscy9wYWdlJztcbmltcG9ydCB7IFBvc3RSZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3Bvc3QtcmVzcG9uc2UnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ1NwcmluZ0Jvb3RTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgfVxuXG4gIGdldFBhZ2U8VD4odXJsOiBzdHJpbmcsIHBhZ2VhYmxlPzogUGFnZWFibGUsIG9wdGlvbnM/OiB7XG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzIHwge1xuICAgICAgW2hlYWRlcjogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfTtcbiAgICBvYnNlcnZlPzogJ2JvZHknO1xuICAgIHBhcmFtcz86IEh0dHBQYXJhbXMgfCB7XG4gICAgICBbcGFyYW06IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH07XG4gICAgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuO1xuICAgIHJlc3BvbnNlVHlwZT86ICdqc29uJztcbiAgICB3aXRoQ3JlZGVudGlhbHM/OiBib29sZWFuO1xuICB9KTogT2JzZXJ2YWJsZTxQYWdlPFQ+PiB7XG4gICAgY29uc3QgcGFyYW1zID0gdGhpcy51cmxQYXJhbXMocGFnZWFibGUsIHVybC5pbmNsdWRlcygnPycpKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQYWdlPFQ+Pih1cmwgKyBwYXJhbXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgcG9zdFJlc291cmNlKHVybDogc3RyaW5nLCByZXNvdXJjZTogYW55LCBvcHRpb25zPzoge1xuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyB8IHtcbiAgICAgIFtoZWFkZXI6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH07XG4gICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJztcbiAgICBwYXJhbXM/OiBIdHRwUGFyYW1zIHwge1xuICAgICAgW3BhcmFtOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICB9O1xuICAgIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbjtcbiAgICByZXNwb25zZVR5cGU/OiAnanNvbic7XG4gICAgd2l0aENyZWRlbnRpYWxzPzogYm9vbGVhbjtcbiAgfSk6IE9ic2VydmFibGU8UG9zdFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgcmVzb3VyY2UsIG9wdGlvbnMgPyBvcHRpb25zIDoge29ic2VydmU6ICdyZXNwb25zZSd9KS5waXBlKFxuICAgICAgc3dpdGNoTWFwKHIgPT4ge1xuICAgICAgICBpZiAoci5zdGF0dXMgPT09IDIwMSkge1xuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gci5oZWFkZXJzLmdldCgnbG9jYXRpb24nKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhdGlvbik7XG4gICAgICAgICAgcmV0dXJuIG9mKHtsb2NhdGlvbjogbG9jYXRpb24sIGlkOiBsb2NhdGlvbiAmJiBsb2NhdGlvbi5sZW5ndGggPiAwID8gbG9jYXRpb24uc3Vic3RyKGxvY2F0aW9uLmxhc3RJbmRleE9mKCcvJykgKyAxKSA6ICcnfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRocm93RXJyb3Ioe3N0YXR1czogci5zdGF0dXMsIHRleHQ6IHIuc3RhdHVzVGV4dH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHVybFBhcmFtcyhwOiBQYWdlYWJsZSwgYXBwZW5kOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICBsZXQgcGFyYW1zID0gJyc7XG4gICAgaWYgKHApIHtcbiAgICAgIGlmIChwLnBhZ2UpIHtcbiAgICAgICAgcGFyYW1zICs9ICdwYWdlPScgKyBwLnBhZ2UgKyAnJic7XG4gICAgICB9XG4gICAgICBpZiAocC5zaXplKSB7XG4gICAgICAgIHBhcmFtcyArPSAnc2l6ZT0nICsgcC5zaXplICsgJyYnO1xuICAgICAgfVxuICAgICAgaWYgKHAuc29ydCkge1xuICAgICAgICBwYXJhbXMgKz0gJ3NvcnQ9JyArIHAuc29ydDtcbiAgICAgICAgaWYgKHAuc29ydERpcikge1xuICAgICAgICAgIHBhcmFtcyArPSAnOycgKyBwLnNvcnREaXI7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zICs9ICcmJztcbiAgICAgIH1cbiAgICAgIGlmIChwLmZpbHRlcikge1xuICAgICAgICBwYXJhbXMgKz0gJ2ZpbHRlcj0nICsgcC5maWx0ZXIgKyAnJic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXMubGVuZ3RoID09PSAwID8gJycgOiAoYXBwZW5kID8gJyYnIDogJz8nKSArIHBhcmFtcy5zdWJzdHIoMCwgcGFyYW1zLmxlbmd0aCAtIDEpO1xuICB9XG5cbn1cbiJdfQ==